{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"MondoDB/","title":"MongoDB","text":"<p>Humongous: - extremely large: Huge a humongous building humongous amounts of money. - To handle a very huge amount of data if we want a database, then go for mongodb</p>"},{"location":"MondoDB/#intro","title":"Intro","text":"<ul> <li>MongoDB is the most popular and trending database.</li> <li>The vendor: MongoDB</li> <li>https://www.mongodb.com/</li> </ul>"},{"location":"MondoDB/#where-we-can-use-mongodb","title":"Where we can use mongoDB","text":"<ul> <li>For desktop applications, for mobile applications</li> <li>For web applications, this database is more popular</li> <li>Full stack developer</li> </ul>"},{"location":"MondoDB/#stack","title":"stack","text":"<p>The technologies which can be used to devlop web application are called a stack.</p> <p>The most popular stack: 1. MEAN Stack 2. MERN Stack</p> <p></p> <p>It is js based web application</p>"},{"location":"MondoDB/#mern-mean","title":"MERN /MEAN","text":"<ul> <li>MongoDB \u2014 document database</li> <li>Express(.js) \u2014 Node.js web framework</li> <li>React(.js)/ Angular \u2014 a client-side JavaScript framework</li> <li>Node(.js) \u2014 the premier JavaScript web server</li> </ul> <ul> <li>React / Angular is a frontend framework.</li> <li>Express.js is the Backend server framework.</li> <li>Node.js is responsible to provide server side runtime environment</li> <li>MongoDb is database</li> </ul> <p>By using MEAN and MEAN Stack, we can build javascript based web application. 1) Node.js is based on javascript 2) React / Angular is based on javascript 3) Express.js is based on javascript 4) MongoDb is based on javascript</p> <p>MongoDB internally uses Mozilla's spider Monkey javaScript Engin</p>"},{"location":"MondoDB/#q3-what-is-the-type-of-mongodb","title":"Q3) What is the type of mongoDB","text":"<ul> <li>It is Document database / NoSQL database</li> <li>NoSql = &gt; Not only SQL</li> </ul> <p>Relational database Vs Document Database</p>"},{"location":"MondoDB/#there-are-two-most-common-types-of-databases","title":"There are two most common types of databases","text":"<ol> <li>Relational databases / SQL databases</li> <li>Document databases / NoSql database</li> </ol> <ol> <li>Relational databases/SQL databases</li> <li>The total data sore in the form of table</li> <li>table based on fixed schema eg employee(eno,ename,esal,eaadr)</li> <li></li> <li> </li> <li> <p>The data will be stored in table, and these tables have fixed schma(structure)</p> </li> <li>The data stored in tables has relationship like:<ol> <li>one to one</li> <li>one to many</li> <li>many to one</li> <li>many to many</li> </ol> </li> <li>To retrieve data from a relational database, we have to write join queries that collect data from different tables<ul> <li>eg Oracle, Mysql etc</li> </ul> </li> <li>Document Database / NoSQL Database</li> <li></li> <li>Each DB contains multiple collections</li> <li>Inside each collection there are multiple documents</li> <li>Each document is just like a row</li> <li>Our data stored in document such type of db called document oriented or document</li> <li>each document is independent of the other</li> <li>Data will be stored in separate documents and each document is indecent of others<ul> <li>mongodb    it not having fixed schema</li> </ul> </li> </ol>"},{"location":"MondoDB/#mongodb-structure","title":"MongoDB structure","text":"<ul> <li>MongoSB physical database contains several logical database</li> <li>Each database contains several collections. Collection is something like table in a relation database.</li> <li>Each collection contains several documents. Document is something like record/ row in a relational database</li> <li>eg</li> <li>Database: Shopping cart database</li> <li>collections: Customer, Products, Order</li> <li>Customer Collection Contains several documents</li> </ul> <pre><code>document1:{\n         \"name\": \"Sunny\",\n         \"age\": 40,\n         \"salary\": 10000,\n       }\n</code></pre>"},{"location":"MondoDB/#q-how-data-represent-in-mongodb","title":"Q How data represent in mongoDB?","text":"<ul> <li>In JSON (BSON) format</li> <li>JSON =&gt; JavaScript Object Notation (Biggest advantage of mongo)</li> <li>Bson =&gt; Binary JSON</li> <li>The document will be stored in Binary Form</li> </ul>"},{"location":"MondoDB/#key-characters-of-mongodb-database","title":"Key characters of MongoDB database","text":"<ol> <li>All information related to a document will be stored in a single place.</li> <li>To retrieve data, it is not required to perform join operations, hence retrival is very fast</li> <li>Documents are independent of each other and no schema. Hence, we can store unstructured data like video, audio files, etc.</li> <li>We can perform operation lie editing existing document, deleting document and inserting a new document very easily</li> <li>Retrival data is in the form of json which can be understandable ny any programing language without any conversion (Interoperability)</li> <li>We can store a very huge amount of data and hence scalability is more</li> </ol> <p>Note: performance and flexibility are the biggest assets of mongodb</p>"},{"location":"MondoDB/#popular-nosql","title":"popular NOSQL","text":"<ol> <li>MongoDB</li> <li>Cassandra </li> <li>Elasticsearch</li> <li>Neo4J</li> <li>HBase</li> <li>redis.io</li> </ol>"},{"location":"MondoDB/#if-we-install-mongodb-we-will-get-two-things","title":"If we install mongodb, we will get two things:","text":"<ol> <li>Mongodb shell</li> <li>Mongodb server</li> </ol> <p>These are separate javascript based application</p>"},{"location":"MondoDB/#mongodb-shell-vs-mongodb-server","title":"Mongodb shell Vs Mongodb server","text":"<p>Once we install Mongodb, we will get Mongodb shell and Mongodb server. These are javascript based application</p> <p>Mongodb server role</p> <p>Store data in Mongodb database.it is responsible to sore our data in database</p>"},{"location":"MondoDB/#purpose-of-shell","title":"Purpose of shell","text":"<ul> <li>Shell can be used to manage mongodb server</li> <li>Mongo shell is responsible to manage server</li> <li> <p>By using this shell we can perform all required CRUD operation.</p> </li> <li> <p>c =&gt; create</p> </li> <li>R =&gt; Read</li> <li>U =&gt; Update</li> <li>D =&gt; Delete</li> </ul> <p> - Mongodb server can be either local or remote - To launch / start mongo server = &gt; Mongod command - To launch / start mongo shell = &gt; Mongo command</p> <ul> <li>GUI support is also there for mongodb shell =&gt; mongodb compass</li> </ul>"},{"location":"MondoDB/#mongo-driver","title":"Mongo Driver","text":"<p> If we want to communicate with database special software need like a driver - From application(C#,python, java,node.js) if we want to communicate with a database some special software must be required which is nothing but driver software</p> <p>pymongo is a recommended way to work with MongoDB for python</p> <p>Some shell commands    <pre><code> show dbs\n show collactions\n\n db.stats()\n db.version()\n db.help()\n</code></pre> <code>mongod -version</code> to perform an operation on server =&gt; <code>mongod --dbpath \"c:\\data\\db\"</code> - Py mongo is recommended way to work with MongoDB from python - 27017 =&gt; Default Port Number - mongo.exe/mongosh.exe =&gt; shell - mongod.exe =&gt; server - if we enter mongod in cmd it will get path error (\"NonExistentPath - db\") - create a path \"c:\\data\\db\"</p>"},{"location":"MondoDB/#default-database","title":"Default Database:","text":"<p>MongoDB admin use these default database</p> <p><code>show dbs</code> - admin - config - local</p>"},{"location":"MondoDB/#1-admin","title":"1. admin","text":"<ul> <li>adminDB is used store user authentication and authorization information like userna,e, passwords roles etc</li> <li>This database is used by adminstrator which creating,deleting and uploading user and while assining roles</li> </ul>"},{"location":"MondoDB/#2-config","title":"2. Config:","text":"<ul> <li>To store configuration information of mongodb server like which part its listing</li> </ul>"},{"location":"MondoDB/#3-local-clone-a-db","title":"3. local (clone a DB)","text":"<ul> <li>Replica</li> <li>localDB can be used by admin while performing replication process</li> </ul> <p>We can store very huge amount of data and hence scalibilty is more</p>"},{"location":"MondoDB/#data-formats-in-mongodb","title":"Data Formats in MongoDB","text":"<p>JSON : {name: \"ashish\"} =&gt; BSON and that BSON will be storted</p>"},{"location":"MondoDB/#why-bson","title":"Why BSON","text":"<p>1). In JavaScript only 6 types are available    1. string    2. Number    3. Object    4. Array    5. Boolean    6. Null</p> <p>But Bson provides some extra types also like       - 32 Bit Integer =&gt; Numerical       - ObjectID =&gt; JSON =&gt;10kb       - Date =&gt; BSON 4 to 5 kb</p> <ol> <li> <p>BSON required less memory</p> </li> <li> <p>End user / Developer will provide data in json formate</p> </li> <li>In mongoDb server data will be stored in BSON form</li> </ol> <p>Note:</p> <p>Efficient storage and extra data types are specicilty of BSON over JSON</p> <p>EJSON =&gt; Extended JSON    At the time of retrieval BSON Data will be converted to EJSON for Understend puroperly</p> <p></p> <ul> <li>Insertion of Document / Creation = JSON to BSON</li> <li>Read Operation / Retrieval operation = BSON to JSON</li> </ul> <p>Q What data formaat used in MongoDB    - Three (3) Formats JSON, BSON, EJSON</p> <p>### Creation of database and collection    - Database will be created dynamically    - Whenever we are creating collection or inserting document then database will be created dynamically</p> <p>### How to create collection    <pre><code> use ashishDB\ndb.createCollection(\"employees\") # Should be camel-case\n</code></pre></p> <p>### How to drop collection     <pre><code>db.collection.drop()\ndb.student.drop()\n</code></pre></p> <p>### How to drop database    <pre><code> db.dropdatabase()\n db.studentdb.drop() # current database will be deleted\n</code></pre></p>"},{"location":"MondoDB/#basic-crud-operation-in-simple-way","title":"Basic CRUD operation in simple way","text":"<ol> <li>C =&gt; Create / Insert document</li> </ol> <pre><code>   db.collection.inserOne()\n   db.collection.inserMany()\n   db.collection.insertOne({ name: \"Alice\", age: 25 })\n   db.collection.insertMany([{ name: \"Bob\", age: 30 }, { name: \"Charlie\", age: 22 }])\n\n   db.collection.inser()\n      Collection.insert() # is deprecated.\n</code></pre> <p>Additional Methods for Inserts The following methods can also add new documents to a collection:</p> <pre><code>   db.collection.updateOne() # when used with the upsert: true option.\n\n   db.collection.updateMany() # when used with the upsert: true option.\n\n   - db.collection.findAndModify() # when used with the upsert: true option.\n\n   - db.collection.findOneAndUpdate() # when used with the upsert: true option.\n\n   db.collection.findOneAndReplace() # when used with the upsert: true option.\n\n   db.collection.bulkWrite().\n   db.collection.bulkWrite() # MongoDB provides the ability to perform write operations in bulk.\n</code></pre> <ol> <li>R =&gt; Read / Retrieval operation</li> </ol> <pre><code>db.collection.find() # To get all documents present in the given collection.&lt;br&gt;\ndb.collection.dindOne() # To get one document&lt;br&gt;\ndb.find().pretty()\n</code></pre> <p>3) Update =&gt; Update Operation</p> <p><pre><code>   db.collection.updateOne()\n   db.collection.updateMany()\n   db.collection.replaceOne()\n</code></pre>    - Old value will relace with new    - If Filed is not already there it will create and update operation document must one atomice operation    $ =&gt; predefine <code>{$set{sal:1000}}</code></p> <p>Note:    If anything prefixed with$ symbol, then it is predfine word in MongoDB</p> <p>4) D =&gt; Delete opration <pre><code>   db.collection.deleteOne()\n   db.collection.deleteMany()\n</code></pre></p> <p>Note Datbase and collection will be created dynamically whenever we are creting document.</p>"},{"location":"MondoDB/#capped-collection","title":"Capped Collection","text":"<p><pre><code>   db.createCollection(name,options) # p1 = max, size ,document\n   db.createCollection(\"emp\",{capped:true, size:3736578,max:100})\n</code></pre>    - Old document will be deleted automatically Based on time stemp    - If capped is true meaning that if size exceeds or maximum number of document  reached, then oldest entry will be deleted automatically.</p> <pre><code>   db.createCollection(\"emp\") # Normal Collection\n   db.createCollection(\"emp\",{capped:true}) # Invalid \n   # without  size,max we cannot created capped collection\n   db.createCollection(\"emp\",{capped:true, size:36734543}) # valid\n   db.createCollection(\"emp\",{size:3676934})` # Invalid\n      #\"errorM$g\": the capped filed needs to be true eithere thr size or max filed.\n   db.createCollection(\"emp\",{capped:true, size:3343455453,max:10000}) # valid\n</code></pre>"},{"location":"MondoDB/#q-what-is-capped-collection","title":"Q What is capped collection?","text":"<p>If size exceeds or maximum numbers of documents reached then oldest entry will be deleted automatically, such type of collection are called capped</p> <p>By Default in MongoDB there is no schema but we can stil define schema</p>"},{"location":"MondoDB/#inserting-documents-in-the-collection-c-create","title":"Inserting Documents in the collection (C =&gt; Create)","text":"<pre><code>   db.collection.inserOne() # Highly Recommeneded\n   db.collection.inserMany() # Highly Recommeneded\n   db.collection.inser() # Deprecated\n</code></pre> <ol> <li> <p>db.collection.inserOne() <pre><code>   db.employee.InsertOne({})`\n   # Argument is only one javascript object&lt;br&gt;\n\n   db.employee.insertOne({eno:100,ename:\"ashish\"})`\n</code></pre> </p> </li> <li> <p>db.collection.inserMany()</p> </li> <li> <p>To inset multiple documents we need to pass array of javascript object  <pre><code>   db.collection.insertMany([{},{}])\n   db.collection.insertMany([{eno:102,ename:\"sonu\"},{eno:103,ename:\"kumar\"}])\n</code></pre> </p> </li> <li> <p>db.collection.inser()</p> </li> <li>To insert either a single document or multiple <pre><code>   db.collection.inser({})\n   db.collection.inser([{}])\n   db.employee.inser()\n</code></pre> </li> </ol>"},{"location":"MondoDB/#creating-document-separtly-inserting-into-collection","title":"Creating Document separtly &amp; inserting into collection","text":"<p><pre><code>      var emp = {};\n      emp.eno = 7777;\n      emp.ename = \"SUNNY\";\n      emp.esal = 7777777;\n      mp.eaddr = \"yhd\";\n      emp = { \n            eno: 7777, \n            ename: 'SUNNY', \n            esal: 7777777, \n            eaddr: 'yhd' \n         }\n\n      db.employees.insertMany([emp])\n\n      db.employees.insertOne(emp)\n      db.employees.insertMany([emp])\n      db.employees.insert(emp)\n      db.employees.insert([emp])\n</code></pre> </p>"},{"location":"MondoDB/#inserting-document-from-javascript-file","title":"Inserting Document from JavaScript file","text":""},{"location":"MondoDB/#inserting-document-from-json-file-mongo-import-tool","title":"Inserting Document from JSON file (Mongo Import Tool)","text":"<ul> <li>In JSON file, the data should be in array form make size the data should be of json only</li> </ul>"},{"location":"MondoDB/#javascript-vs-json","title":"javaScript vs json","text":"<ul> <li>In JavaScript object, quote symbols for keys are optional but in JSON quote symbols are  mandatory for keys</li> </ul> <p>db.collection.insertOne(javaScript Object)    javaScript Object =&gt; Quote symbol are optional</p> <ul> <li>Mongod =&gt; Tool to start mongoDB server</li> <li>Mongosh =&gt; Tool to start MongoDB shell</li> <li>MongoImport =&gt; Tool to Import documents from JSON file into MongoDB</li> </ul> <p>mongoImport is not available bydefault we have to make avalable mannualy.</p> <p>Note:</p> <p>MongoImport command should be executed from the Command prompt but not from shell</p> <p><pre><code>mongoimport --db database Name --collectionName --fileName --JSON array\n</code></pre> Note:</p> <p>Similerly we can use mongoImport data from csv file</p>"},{"location":"begginer/","title":"random","text":""},{"location":"begginer/#connection","title":"connection","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient()\nprint(client)\n\n# print(client.__dict__)\ndb_list = client.list_database_names()\n#print(db_list)\n\n#for db in db_list:\n#   print(db)\n\n# create dbname\ndb = client['pytest']\nprint(db)\n\n# collection name\nempCollection = db.employees\nprint(empCollection)\n\nclient.close()\n</code></pre>"},{"location":"begginer/#display","title":"display","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient()\ndb = client['pytest']\nempColl = db.employees\n\ndocument = empColl.find_one()\nprint(document.get('ENO'))\nprint(document.get('ENAME'))\n\nempcourser = empColl.find()\n\nfor doca in empcourser:\n    print(doca)\n\nempcourser = empColl.find()\n\nprint('*'*100)\nprint()\nprint('ID\\tNAME\\tSALARY')\nfor doc in empcourser:\n#   print(type(doc))\n    print(f\"{doc.get('ENO')}\\t{doc.get('ENAME')}\\t{doc.get('ESAL')}\")\nprint()\nprint('*'*100)\nclient.close()\n</code></pre>"},{"location":"begginer/#dynamic-input","title":"dynamic input","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient()\ndb_list = client.list_database_names()\ndb = client['pytest']\n\n# collection name\nempCollection = db.employees\n\nwhile True:\n    eno = int(input('Emp number!!! '))\n    ename = input('Emp name.. ')\n    esal = float(input('Enter Emp salary.. '))\n    document = {'ENO':eno,'ENAME':ename,'ESAL':esal}\n    empCollection.insert_one(document)\n    print(document) \n    option = input(' yes |  no ').lower()\n    while option not in ('yes','y','n','no'):\n        option = input(' Invalid option [y|n]')\n        print()\n    if option in ('no','n'):\n        break\n\n\nprint(\"Successfully inserted!!! \")\nclient.close()\n</code></pre>"},{"location":"begginer/#insert","title":"insert","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient()\ndb_list = client.list_database_names()\ndb = client['pytest']\n\n# collection name\nempCollection = db.employees\ndocument = {'ENO':101,'ENAME':'Bindra','ESAL':10000}\nprint(document) \nempCollection.insert_one(document)\nprint(\"successfully inserted\")\nclient.close()\n</code></pre>"},{"location":"begginer/#insert-many","title":"insert many","text":"<pre><code>import pymongo\n\nclient = pymongo.MongoClient()\ndb_list = client.list_database_names()\ndb = client['pytest']\n\n# collection name\nempCollection = db.employees\nemplist = [\n\n    {'ENO':103,'ENAME':'SUNNY','ESAL':12000},\n    {'ENO':104,'ENAME':'BUNNY','ESAL':13000},\n    {'ENO':105,'ENAME':'Pinny','ESAL':14000},\n    {'ENO':106,'ENAME':'Binny','ESAL':15000},\n    {'ENO':107,'ENAME':'MAAJID','ESAL':160000},\n]\nprint(emplist)  \nempCollection.insert_many(emplist)\nprint(\"all results successfully inserted\")\nclient.close()\nprint(f'{len(emplist)}')\n</code></pre>"},{"location":"mongovalid/","title":"validation","text":"<pre><code>from dotenv import load_dotenv , find_dotenv\nimport os\nimport pprint\nfrom pymongo import MongoClient,errors\nfrom bson.objectid import ObjectId\nfrom datetime import datetime\nload_dotenv(find_dotenv())\n\npassword = os.environ.get(\"MONGODB_PWD\")\n\nconnection_string = f\"mongodb+srv://blueaves15:{password}@trainingclustor.nl44poy.mongodb.net/?retryWrites=true&amp;w=majority&amp;authSource=admin\"\nclient = MongoClient(connection_string)\n\n\n\nproduction = client.production \n\ndef create_book_collection():\n    book_validator = {\n        \"$jsonSchema\": {\n            \"bsonType\": \"object\",\n            # \"title\": \"Book Object Validation\",\n            \"required\": [ \"title\", \"authors\", \"publish_date\", \"type\", \"copies\" ],\n            \"properties\": {\n                \"title\": {\n                \"bsonType\": \"string\",\n                \"description\": \"must be a string and is required\"\n                },\n                \"authors\": {\n                \"bsonType\": \"array\",\n                \"items\":{\n                    \"bsonType\": \"objectId\",\n                    \"description\": \"must be a objectId and is required\"\n                }\n                },   \n                \"publish_date\": {\n                \"bsonType\": \"date\",\n                \"description\": \"must be a string and is required\"\n                },  \n                \"type\": {\n                    \"enum\": [\"Fiction\", \"Non-Fiction\"],\n                    \"description\": \"must be a enum and is required\"\n                },   \n                \"copies\": {\n                \"bsonType\": \"int\",\n                \"minimum\": 0,\n                \"description\": \"must be a integer grater than 0 and is required\"\n                },\n            }\n        }\n    }\n\n    try:\n        production.create_collection(\"book\")\n    except errors.CollectionInvalid as er:\n        print(er)\n    except errors.OperationFailure as OP:\n        print(OP)\n\n    production.command(\"collMod\", \"book\", validator = book_validator)\ncreate_book_collection()\n\ndef create_author_collection():\n    author_validator = {\n        \"$jsonSchema\": {\n            \"bsonType\": \"object\",\n            \"title\": \"author Object Validation\",\n            \"required\": [ \"first_name\", \"last_name\", \"date_of_birth\" ],\n            \"properties\": {\n                \"first_name\": {\n                \"bsonType\": \"string\",\n                \"description\": \"must be a string and is required\"\n                },\n                \"last_name\": {\n                  \"bsonType\": \"string\",\n                \"description\": \"must be a string and is required\"\n                },\n                \"date_of_birth\": {\n                \"bsonType\": \"date\",\n                \"description\": \"must be a date and is required\"\n                }, \n            }}\n\n    }\n    try:\n        production.create_collection(\"author\")\n    except errors.CollectionInvalid as er:\n        print(er)\n    except errors.OperationFailure as OP:\n        print(OP)\n\n    production.command(\"collMod\", \"author\", validator = author_validator)\n\n# create_author_collection()\n\ndef create_data():\n    authors = [\n        {\n        \"first_name\":\"ashish\",\n        \"last_name\": \"bindra\",\n        \"date_of_birth\": datetime(1998,7,20)\n        },  {\n        \"first_name\":\"sonu\",\n        \"last_name\": \"bindra\",\n        \"date_of_birth\": datetime(1995,7,10)\n        },  {\n        \"first_name\":\"sershti\",\n        \"last_name\": \"bindra\",\n        \"date_of_birth\": datetime(1996,7,2)\n        }, \n         {\n        \"first_name\":\"sapna\",\n        \"last_name\": \"bindra\",\n        \"date_of_birth\": datetime(1850,2,20)\n        },  {\n        \"first_name\":\"sarvesh\",\n        \"last_name\": \"bindra\",\n        \"date_of_birth\": datetime(1940,3,20)\n        },\n    ]\n\n    author_collection = production.author\n    authors_ids = author_collection.insert_many(authors).inserted_ids\n    print(authors_ids)\n    books = [\n        {\n            \"title\": \"MongoDB Advance\",\n            \"authors\": [authors_ids[0]],\n            \"publish_date\": datetime.today(),\n            \"type\": \"Non-Fiction\",\n            \"copies\":5\n        }, {\n            \"title\": \"python Advance\",\n            \"authors\": [authors_ids[1]],\n            \"publish_date\": datetime.today(),\n            \"type\": \"Non-Fiction\",\n            \"copies\":5\n        },\n        # {\n        #     \"title\": \"Java Advance\",\n        #     \"authors\": [authors_ids[3]],\n        #     \"publish_date\": datetime.today(),\n        #     \"type\": \"Non-Fiction\",\n        #     \"copies\":5\n        # },\n        {\n            \"title\": \"Ninteen Advance\",\n            \"authors\": [authors_ids[4]],\n            \"publish_date\": datetime(1949,3,5),\n            \"type\": \"Fiction\",\n            \"copies\":5\n        }, {\n            \"title\": \"pandas Advance\",\n            \"authors\": [authors_ids[1]],\n            \"publish_date\": datetime.today(),\n            \"type\": \"Fiction\",\n            \"copies\":5\n        }, {\n            \"title\": \"Marry\",\n            \"authors\": [authors_ids[3]],\n            \"publish_date\": datetime(2012,2,14),\n            \"type\": \"Fiction\",\n            \"copies\":5\n        }, \n        {\n            \"title\": \"Moby Dick\",\n            \"authors\": [authors_ids[2]],\n            \"publish_date\": datetime(1800,9,23),\n            \"type\": \"Fiction\",\n            \"copies\":5\n        },\n    ]\n\n    book_collection = production.book\n    book_collection.insert_many(books)\n\n# create_data()\nprinter = pprint.PrettyPrinter()\n\n# book_containing_a = production.book.find({\"title\": {\"$regex\": \"a{1}\"}}) #atleast one a matched\n\n# printer.pprint(list(book_containing_a))\n\n# authors_and_books = production.author.aggregate([{\n#     \"$lookup\": {\n#         \"from\": \"book\",\n#         \"localField\":\"_id\",\n#         \"foreignField\": \"authors\",\n#         \"as\":\"boos\"\n#     }\n# }])\n\n# printer.pprint(list(authors_and_books))\n\nauthors_and_books_count = production.author.aggregate([\n    {\n        \"$lookup\": {\n            \"from\": \"book\",\n            \"localField\":\"_id\",\n            \"foreignField\": \"authors\",\n            \"as\":\"books\"\n        },\n    },\n    {\n        \"$addFields\": {\n            \"total_books\": {\"$size\": \"$books\"}\n        }\n    },\n    {\n        \"$project\": {\"first_name\":1, \"last_name\": 1,\"total_books\":1, \"_id\":0} # should be in last\n    }\n])\n\n# printer.pprint(list(authors_and_books_count))\n\n# find age of the author with in 50 to 150 years\nauthors_and_books = production.book.aggregate([{\n    \"$lookup\": {\n        \"from\": \"author\",\n        \"localField\":\"authors\",\n        \"foreignField\": \"_id\",\n        \"as\":\"authors\"\n    }\n} ,\n{\n    \"$set\":{\n        \"authors\": {\n            \"$map\":{\n                \"input\":\"$authors\",\n                \"in\":{\n                    \"age\": {\n                        \"$dateDiff\":{\n                            \"startDate\": \"$$this.date_of_birth\",\n                            \"endDate\": \"$$NOW\",\n                            \"unit\": \"year\"\n                        }\n                        },\n                        \"first_name\": \"$$this.first_name\",\n                        \"last_name\": \"$$this.last_name\",\n                }\n            }\n        }\n    }\n}\n,{\n    \"$match\":{\n        \"$and\":[\n            {\"authors.age\": {\"$gte\":50}},\n            {\"authors.age\": {\"$lte\":150}},\n        ]\n    }\n},{\n    \"$sort\":{\n        \"age\": 1\n    }\n}\n])\nprinter.pprint(list(authors_and_books))\n</code></pre> <pre><code>from dotenv import load_dotenv , find_dotenv\nimport os\nimport pprint\nfrom pymongo import MongoClient\nfrom bson.objectid import ObjectId\n\nload_dotenv(find_dotenv())\n\npassword = os.environ.get(\"MONGODB_PWD\")\n\nconnection_string = f\"mongodb+srv://blueaves15:{password}@trainingclustor.nl44poy.mongodb.net/?retryWrites=true&amp;w=majority\"\nclient = MongoClient(connection_string)\n\ndbs = client.list_database_names()\nprint(\"list od dbs\",dbs)\n\ntest_db = client.test \ncollections = test_db.list_collection_names()\nprint(\"list of collections\",collections)\n\ndef insert_test_doc():\n    \"\"\"\n    get test collection from test database\n    \"\"\"\n\n    collection = test_db.test_db\n    test_document = {\n        \"name\": \"ashish\",\n        \"type\": \"Test\",\n    }\n    inserted_id = collection.insert_one(test_document).inserted_id\n\n    print(inserted_id) # Bson Object ID\n\n# insert_test_doc()\n\nproduction = client.production\nperson_collection = production.person_collection\n\ndef create_document():\n    first_names = [\"sunny\",\"bunny\",\"cunny\",\"vunny\",\"munny\"]\n    last_names = [\"imaggnry\",\"imaggnry\",\"imaggnry\",\"imaggnry\",\"imaggnry\"]\n    ages = [11,22,33,44,55]\n\n    docs = []\n\n    for first_name, last_name, age in zip(first_names, last_names, ages):\n        doc = {\"first_name\": first_name,\n               \"last_name\": last_name,\n               \"age\":age}\n        docs.append(doc)\n        # persion_collection.insert_one(doc)\n\n    person_collection.insert_many(docs) \n\n# create_document()\nprinter = pprint.PrettyPrinter()\n\ndef find_all_people():\n    people = person_collection.find()\n\n    for person in people:\n        # print(person)\n        printer.pprint(person)\n\n# find_all_people()\n\ndef find_name(name):\n    name_is = person_collection.find_one({\"first_name\":name})\n    printer.pprint(name_is)\n\n# find_name(\"cunny\")\n\ndef count_people():\n    count = person_collection.count_documents(filter={})\n    # or\n    # count = person_collection.find().count() # number of element return by the find , we hav not to all the element , \n    # count() is debrecated\n    print(\"Number of people\",count)\n\n# count_people()\n\ndef get_person_by_id(persion_id):\n\n    _id = ObjectId(persion_id)\n    persion = person_collection.find_one({\"_id\": _id})\n\n    printer.pprint(persion)\n\n# get_person_by_id(\"65c88c0529d602cdfab899cf\")\n\ndef get_age_range(min_age, max_age):\n    query = {\n        \"$and\": [\n            {\"age\": {\"$gte\": min_age}},\n            {\"age\": {\"$lte\": max_age}}\n\n        ]\n    }\n    people = person_collection.find(query).sort(\"age\")\n\n    for person in people:\n        printer.pprint(person)\n\n# get_age_range(20,35)\n\ndef project_columns():\n    columns = {\"_id\":0, \"first_name\": 1, \"last_name\": 1}\n    people = person_collection.find({}, columns)\n\n    for person in people:\n        printer.pprint(person)\n\n# project_columns()\n\ndef update_person_by_id(persion_id):\n    _id = ObjectId(persion_id)\n\n    all_updates = {\n        \"$set\": {\"new_field\": True}, # if field currently exisited we would orride that field\n        \"$inc\": {\"age\": 1},\n        \"$rename\": {\"first_name\": \"first\", \"last_name\": \"last\"}\n    }\n\n    # person_collection.update_one({\"_id\": _id}, all_updates)\n    person_collection.update_one({\"_id\": _id}, {\"$unset\": {\"new_field\": \"\"}})\n\n\n# update_person_by_id(\"65c88c0529d602cdfab899d2\")\n# print(\"update\")\n\ndef replace_one(persion_id):\n    _id = ObjectId(persion_id)\n\n    new_doc = {\n        \"first_name\": \"ashish\",\n        \"last_name\": \"bindra\",\n        \"age\":100\n    }\n\n    person_collection.replace_one({\"_id\": _id}, new_doc)\n\n# replace_one(\"65c88c0529d602cdfab899cf\")\n\ndef delete_doc_by_id(persion_id):\n    _id = ObjectId(persion_id)\n    person_collection.delete_one({\"_id\": _id})\n\n# delete_doc_by_id(\"65c88c0529d602cdfab899cf\")\n\ndef add_address_embed(persion_id, address):\n    _id = ObjectId(persion_id)\n\n    person_collection.update_one(\n        {\"_id\": _id},{\"$addToSet\": {'addresses': address}}\n\n    )\naddress={\n    # \"_id\":\"1\",\n    \"street\":\"13\",\n    \"number\": 2456,\n    \"city\":\"patiala\",\n    \"country\": \"india\",\n}\n# add_address_embed(\"65c88c0529d602cdfab899d0\",address=address)\n\ndef add_address_relationship(person_id, address):\n    _id = ObjectId(person_id)\n\n    address = address.copy()\n    address[\"owner_id\"] = person_id\n\n    address_collection = production.address\n    address_collection.insert_one(address)\n\nadd_address_relationship(\"65c88c0529d602cdfab899d2\",address)\n</code></pre> <ul> <li>first install pymongo <code>pip install pymongo[srv]</code></li> <li><code>pip install python-dotenv</code> </li> </ul> <p>No sql database like mongodb actually stores unstructured data and typically in json format - Abiltiy to perform frequent changes to struce of the data - Highly Flexible () - Faster quiery  - saclable</p>"},{"location":"mongovalid/#document-model","title":"document model","text":"<p>database -&gt; collections -&gt; documents</p> <p>Bson type satore</p>"},{"location":"mongovalid/#find","title":"find({})","text":"<p>allow to insert a query object which is different properties that we are tyring to match when we are looking for elemnt or document. -if we live empty it just find all document in collection</p> <p>a curser is sothing that we can iterate over</p>"},{"location":"mongovalid/#oprator","title":"oprator","text":"<p>$set change the value of specific field create a new field to be a value, can use as overrite  maily for new field - $inc =&gt; we can increament value - $rename =&gt;  we can rename the field - $unset =&gt;  to remove a field - $addToSet =&gt;  add as an array - $addFields =&gt; to add a new field - $regex =&gt; regular expression - $lookup =&gt; left outter join - $projection =&gt; field to display - $this =&gt; referance of cuurent elemants - $dateDiff =&gt; to find the date differences - $map =&gt; to itrate the elements</p> <ul> <li>replace_one()-&gt; to replace a document without replacing and id</li> </ul>"},{"location":"mongovalid/#schema-validation","title":"schema validation","text":"<p>way to create a strucure in mongodb allow to insert what king of what type document we want</p>"},{"location":"mongovalid/#error","title":"error","text":"<ul> <li>12632064:error:10000438:SSL routines:OPENSSL_internal:TLSV1_ALERT_INTERNAL_ERROR:....\\third_party\\boringssl\\src\\ssl\\tls_record.cc:592:SSL alert number 80  --&gt; solve using add ip address</li> <li>bson.errors.InvalidDocument: cannot encode object: datetime.date(2000, 7, 20), of type:  <p>data modeling( relationships and embeded)  - When we have one - to - one relationships is totaly fine to store as embedeed inside store - with multiple relationships we can store seprate coollection, if we chnge so we havent change in wvery documents</p>"},{"location":"mongovalid/#subset","title":"subset","text":"<p>it can be time consuming if we are grabing  every single document for a specific document</p>"},{"location":"pymongo/","title":"pymongo","text":"<ul> <li>MongoDB shell acts as a client to perform our required database operations.</li> <li>MongoDB shell is JavaScript based- special applications to communicates with MongoDb server</li> <li>From Python Program to communicate with mongoDB database some special software must be required, which is nothing but Driver software i.e by using Driver Software Python program can communicated with MongoDB Database</li> <li> <p>Python Driver Software is: Python Library</p> </li> <li> <p>To implement mongo this website is good  https://mongoplayground.net/</p> </li> <li>To delete all the records db.collectionname.deleteMany()</li> </ul> <p>pip =&gt; Package manager in Python</p> <p>By default pymango is not available, we have to install separatly by using commands</p>"},{"location":"pymongo/#how-to-install-pymongo","title":"How to install pymongo","text":"<p><code>pip install pymongo</code></p>"},{"location":"pymongo/#important-steps-in-python-to-mongodb-communication","title":"Important steps in python to MongoDB communication","text":"<ol> <li> <p>Import pymango module in our python program</p> <p><code>import pymongo</code> or <code>from pymongo import *</code></p> </li> <li> <p>Create client to communicate with mongoDB Server</p> <ol> <li><code>client = pymongo.MongoClient()</code> </li> <li><code>client = pymongo.MongoClient('localhost',27017)</code> IP =&gt; localhost, PORT =&gt; 27017</li> <li><code>client = pymongo.MongoClient()</code> </li> </ol> </li> <li> <p>Create/Connect with databse</p> <p><code>empDB = Client['employeeDB]</code></p> </li> <li> <p>Create/Connect with collection     <code>empCollection = empDB.employees</code></p> </li> <li> <p>By using collection object we can perform required databse operations.</p> <ul> <li> <p>To insert Documents :  <code>empCollection.insert_one({})</code> =&gt; Highly Recommended     <code>empCollection.insert_many()</code> <code>empCollection.insert()</code> =&gt; debrecated</p> </li> <li> <p>To find Documents : <code>empCollection.find_one()</code> <code>empCollection.find()</code></p> </li> <li> <p>To Update Documents : <code>empCollection.update_one()</code> -&gt;recommended     <code>empCollection.update_many()</code> <code>empCollection.update()</code></p> </li> <li> <p>To delete Document: <code>empCollection.delete_one()</code> <code>empCollection.delete_many()</code> <code>empCollection.delete()</code></p> </li> <li> <p>Close Client =&gt; Highly Recommended <code>client_close()</code></p> </li> </ul> </li> <li> <p>If we getting this error while retriving <code>_id</code> use <code>str()</code> function to type cast</p> </li> </ol>"},{"location":"pymongo/#to-perform-schema-validation-first-we-need-to","title":"To perform schema validation first we need to","text":"<ul> <li>edit set admin to builtin role in mongo db atlas in database access clink</li> <li>then we have to set <code>&amp;authSource=admin\"</code> at the end of connections string</li> </ul> <p><code>db.dropdatabase()</code></p> eg-1<pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\ndocument = {\n    'Eno': 100,\n    'Ename': 'ASHISH',\n    'ESAL': 10000000,\n    'eaddr': \"Punjab\"\n}\n\nempCollection.insert_one(document)\n\nprint('Document Inserted Successfully!!!')\nclient.close()\n</code></pre> <p>```py tittle=\"eg-2\" import pymongo client = pymongo.MongoClient()</p> <p>db = client['pythondb'] # pythondb is db name</p> <p>empCollection = db.employees # Collection name</p> <p>document = empCollection.find_one()  print(type(document)) # dict print(document)</p> <p>print(document.get('Eno'))</p> <p>client.close() <pre><code>## Write a python scrpt to connnect with MongoDB and display all available databases?\n```py\n# we have o use clicent.list_database_names() method\nimport pymongo\n\nclient = pymongo.MongoClient()\ndb_list = client.list_database_names()\n\nprint('The Available Database are ')\nprint('#'*40)\n\nfor db in db_list:\n    print(db)\n\nclient.close()\n\n# output\nThe Available Database are \n########################################\n# My_Database\n# admin\n# chatflowdb\n# config\n# job_recom_db\n# local\n</code></pre></p>"},{"location":"pymongo/#wap-to-create-a-database-named-woth-python-and-in-that-database-create-a-collection-named-with-employees-and-insert-on-document","title":"WAP to create a database named woth python and in that database create a collection named with employees and insert on document?","text":"<pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\ndocument = {\n    'Eno': 100,\n    'Ename': 'ASHISH',\n    'ESAL': 10000000,\n    'eaddr': \"Punjab\"\n}\n\nempCollection.insert_one(document)\n\nprint('Document Inserted Successfully!!!')\nclient.close()\n\n# Document Inserted Successfully!!!\n</code></pre>"},{"location":"pymongo/#to-insert-multiple-documents","title":"To insert multiple  documents :","text":"<pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nemplist =[\n    {\n    'Eno': 101,\n    'Ename': 'sonu',\n    'ESAL': 10000000,\n    'eaddr': \"up\"\n    },  {\n    'Eno': 102,\n    'Ename': 'krishna',\n    'ESAL': 50000000,\n    'eaddr': \"delhi\"\n    },  {\n    'Eno': 103,\n    'Ename': 'vivek',\n    'ESAL': 99000,\n    'eaddr': \"mp\"\n    },  {\n    'Eno': 104,\n    'Ename': 'duby',\n    'ESAL': 800000,\n    'eaddr': \"j&amp;k\"\n    },\n]\n\nempCollection.insert_many(emplist)\n\nprint('All Documents Inserted Successfully!!!')\nclient.close()\nprint(f'{len(emplist)}')\n\n# output\n# All Documents Inserted Successfully!!!\n# 4\n</code></pre>"},{"location":"pymongo/#read-dynamic-data-from-the-end-user-inserted-into-database","title":"Read Dynamic Data from the end user &amp; inserted into database","text":"<p>db.employees.deleteMany({}) =&gt; delete all data</p> <p><pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nwhile True:\n    Eno = int(input(\"Enter eno \"))\n    Ename = input(\"enter ename \")   \n    ESAL = float(input(\"enter esalary \"))    \n    eaddr = input(\"enter address \")  \n\n    document = {\n        'Eno': Eno,\n        'Ename': Ename,\n        'ESAL': ESAL,\n        'eaddr': eaddr\n        }\n\n    empCollection.insert_one(document)\n    print('Document Inserted Successfully!!!')\n\n    option = input(\"Do you want to insert more \").lower()\n\n    while option not in ('y','yes','n','no') :\n        option = input(\"Invalid Option, [yes/no] \").lower()\n\n    if option in ('no','n'):\n        break\n\nprint(\"Thanks\")\n\nclient.close()\n\n# output\n# Rnter eno 106\n# enter ename aa\n# enter esalary 21321\n# enter address asdsa\n# Document Inserted Successfully!!!\n# Do you want to insert moreno\n# Thanks\n</code></pre> Note: </p> <p>insert() method is deprecated and hence it is not recommened to use instead. We can use inset_one() or insert_many() methods.</p> <p>##  Find Operation:  1. find_one()  2. find()</p> <ol> <li> <p>find_one()</p> <ul> <li>return python dict object</li> <li>to find only one matched document</li> </ul> </li> <li> <p>find()</p> <ul> <li>all match documents to find</li> <li>it return cursor object</li> </ul> </li> </ol>"},{"location":"pymongo/#5-to-find-only-one-document","title":"5. To find only one document","text":"<pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\ndocument = empCollection.find_one() \nprint(type(document)) # dict\n\nprint(document.get('Eno'))\n\nclient.close()\n</code></pre>"},{"location":"pymongo/#to-find-multiple-documents","title":"To find multiple documents","text":"<ul> <li>WAP to display all documents from employees collections</li> <li>here we have to use find() method.</li> </ul> <pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nempcursor = empCollection.find() \nprint(type(empcursor)) \n\nfor document in empcursor:\n    print(type(document))\n    print(f\"{document.get('Eno')}\")\nclient.close()\n\n# output\n# &lt;class 'pymongo.cursor.Cursor'&gt;\n# &lt;class 'dict'&gt;\n# 100\n# &lt;class 'dict'&gt;\n# 101\n# &lt;class 'dict'&gt;\n# 102\n# &lt;class 'dict'&gt;\n# 103\n# &lt;class 'dict'&gt;\n# 104\n# &lt;class 'dict'&gt;\n# 100\n</code></pre>"},{"location":"pymongo/#to-find-all-employees-whose-salary-is-grater-than-1500","title":"To find all employees whose salary is grater than 1500","text":"<p>shell =&gt; db.employee.find({'esal':{\\(gt:1500}}) python =&gt; empcollection.find({'Esal':{'\\)gt' 1500}})</p> <pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nempcursor = empCollection.find({'ESAL': {'$gt': 99000}}) #'' is required\n\nprint(\"*\"*33)\nfor document in empcursor:\n    print(f\"{document.get('ESAL')}\")\n\nclient.close()\n\n# output\n# *********************************\n# 10000000\n# 10000000\n# 50000000\n# 800000\n# 10000000\n</code></pre>"},{"location":"pymongo/#8-to-find-employees-information-based-on-descending-order-of-salary","title":"8 To find employees information based on descending order of salary?","text":"<p>shell : db.employees.find().sort({'ESAL': -1})</p> <p>python : empCollection.find().sort('ESAL', -1) - sort =&gt; take 2 arguments second one is dicrection <pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nempcursor = empCollection.find().sort('ESAL',-1)\n\nprint(\"*\"*33)\nfor document in empcursor:\n    print(f\"{document.get('Eno')} {document.get('Ename')} {document.get('ESAL')} {document.get('eaddr')}\")\n\n# client.close()\n# *********************************\n# 102 krishna 50000000 delhi\n# 100 ASHISH 10000000 Punjab\n# 101 sonu 10000000 up\n# 100 ASHISH 10000000 Punjab\n# 104 duby 800000 j&amp;k\n# 103 vivek 99000 mp\n</code></pre></p>"},{"location":"pymongo/#9-to-display-3-employee-information-who-are-having-least-salary","title":"9. To display 3 employee information who are having least salary","text":"<p>shell : db.employee.find().sort({'ESAL': 1}).limit(3) python : empCollection.find().sort('ESAL', 1).limit(3)</p> <pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\nempcursor = empCollection.find().sort('ESAL',1).limit(3)\n\nprint(\"*\"*33)\nfor document in empcursor:\n    print(f\"{document.get('Eno')} {document.get('Ename')} {document.get('ESAL')} {document.get('eaddr')}\")\n\nclient.close()\n\n# *********************************\n# 103 vivek 99000 mp\n# 104 duby 800000 j&amp;k\n# 100 ASHISH 10000000 Punjab\n</code></pre>"},{"location":"pymongo/#10-display-employee-info-based-on-given-emp-name","title":"10. Display employee info based on given emp name ?","text":"<p>document = empCollection.findOne({\"Ename\": name})</p> <pre><code>import pymongo\nclient = pymongo.MongoClient()\n\ndb = client['pythondb'] # pythondb is db name\n\nempCollection = db.employees # Collection name\n\ndocument = empCollection.find_one({\"Ename\": \"ASHISH\"})\nif document:\n    print(f\"{document.get('Eno')} {document.get('Ename')} {document.get('ESAL')} {document.get('eaddr')}\")\nelse:\n    print(\"element not find\")\nclient.close()\n\n# output\n# 100 ASHISH 10000000 Punjab\n</code></pre>"}]}